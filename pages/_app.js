import { useEffect, useState } from "react";
import { withRouter, useRouter } from "next/router";
import { useSelector, useStore } from "react-redux";
import { Provider, useDispatch } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";
import TagManager from "react-gtm-module";
import { library } from "@fortawesome/fontawesome-svg-core";
import { fas } from "@fortawesome/free-solid-svg-icons";
import { far } from "@fortawesome/free-regular-svg-icons";
import Backdrop from "@material-ui/core/Backdrop";
import Head from "next/head";
import axios from "axios";
import "antd/dist/antd.css";
import '@fortawesome/fontawesome-svg-core/styles.css';
import "../styles/bootstrap.min.css";
import "../styles/LoginPage.css";
import "../styles/Header.css";
import "../styles/MenuSideBar.css";
import 'ag-grid-community/dist/styles/ag-grid.css';
import '../styles/ag-theme-cpf.css';
import "../styles/mystyle.scss";
import "../styles/Toolbar.css";
import "../i18n/i18n";
import { wrapper } from "../redux/store";
import HeaderWithSideBar from "../components/Header/HeaderWithSideBar";
import { setShowLoadingBackdrop } from "../redux/actions/UiConfigAction";

library.add(fas, far);

function MyApp({ Component, pageProps, router }) {
  const store = useStore((state) => state);
  const userInfo = useSelector((state) => state.user);
  const uiconfigStore = useSelector((state) => state.uiconfig);
  const isLoggedIn = useSelector((state) => state.isLoggedIn);
  const dispatch = useDispatch();
  const { query, isReady } = useRouter();

  useEffect(() => {
    TagManager.initialize({ gtmId: "G-3PCT28TL8Q" });
    dispatch(setShowLoadingBackdrop(true));
  }, []);

  axios.defaults.headers.common["Authorization"] = "Bearer " + userInfo.token;
  axios.defaults.headers.common["Access-Control-Allow-Origin"] = "*";
  axios.defaults.headers.common["Access-Control-Allow-Headers"] =
    "Origin, X-Requested-With, Content-Type, Accept";
  axios.defaults.headers.common["X-XSS-Protection"] = "1; mode=block";
  axios.defaults.headers.post["X-Content-Type-Options"] = "nosniff";
  axios.defaults.headers.post["Content-Type"] = "application/json";

  const checkLoginSession = () => {
    console.log("checkLoginSession");
    // console.log(router);

    if (router.pathname === "/SsoPage") {
      console.log(`isReady : ${isReady}`);
      console.log(`isReady : ${router}`);
      localStorage.setItem("Connection", router.query.Connection);
      localStorage.setItem("UserName", router.query.UserName);
      localStorage.setItem("Token", router.query.Token);
      localStorage.setItem("DefaultProgram", router.query.ProgramCode);
      localStorage.setItem("IsSso", "Y");
      // router.push("/Login");
      router.push({ pathname: "/Login", query: router.query });
    } else if (!isLoggedIn) {
      localStorage.setItem("IsSso", "N");
      router.push("/Login");
    }
  };

  return (
    <Provider store={store}>
      {isReady && (
        <PersistGate
          loading={null}
          persistor={store.__PERSISTOR}
          onBeforeLift={checkLoginSession}
        >
          <Head>
            <meta charset="utf-8" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1, shrink-to-fit=no"
            />
            <title>SmartLims</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          {isLoggedIn && (
            <HeaderWithSideBar>
              <Component {...pageProps} />
            </HeaderWithSideBar>
          )}
          {!isLoggedIn && router.route.includes("Login") && (
            <Component {...pageProps} />
          )}
          <Backdrop
            open={uiconfigStore.isShowloadingBackdrop}
            className="backdrop backdrop-loading"
          >
            <div className="Loading">
              <label>{uiconfigStore.loadingText || "Loading"}</label>
              <div className="ball-pulse">
                <div></div>
                <div></div>
                <div></div>
              </div>
            </div>
          </Backdrop>
        </PersistGate>
      )}
    </Provider>
  );
}

export default wrapper.withRedux(withRouter(MyApp));
